``` ```python from flask import Flask, render_template, jsonify, request from trading_bot.bot import TradingBot from trading_bot.config import Config from trading_bot.data.data_provider import DataProvider from trading_bot.machine_learning.model_trainer import ModelTrainer from trading_bot.utils.calculations import Calculations from trading_bot.utils.files import Files from trading_bot.utils.logger import Logger from trading_bot.strategies.base_strategy import BaseStrategy from dataclasses import dataclass import os import time import json import logging from datetime import datetime # Initialize Flask app app = Flask(__name__) app.logger.setLevel(logging.INFO) # Load configuration config = Config() params = config.get_params() strategies = config.get_strategies() logger = Logger() # Initialize trading bot bot = TradingBot(params=params, strategies=strategies) # Initialize data provider, ML model trainer, calculations, and files utilities data_provider = DataProvider() model_trainer = ModelTrainer() calculations = Calculations() files = Files() # Global variable to store the console log messages console_log = [] @dataclass class Position: strategy: str symbol: str side: str entry_price: float quantity: float position_value_usdt: float current_price: float pnl: float pnl_percent: float # Route to display the dashboard @app.route('/') def index(): balance = bot.get_available_balance() status = bot.get_status() return render_template('dashboard.html', balance=balance, status=status, strategies=strategies) # Route to start the bot @app.route('/api/bot/start', methods=['POST']) def start_bot(): try: bot.start() return jsonify({'success': True, 'message': 'Bot started successfully'}) except Exception as e: return jsonify({'success': False, 'message': str(e)}) # Route to stop the bot @app.route('/api/bot/stop', methods=['POST']) def stop_bot(): try: bot.stop() return jsonify({'success': True, 'message': 'Bot stopped successfully'}) except Exception as e: return jsonify({'success': False, 'message': str(e)}) # Route to get bot status @app.route('/api/bot/status') def bot_status(): status = bot.get_status() return jsonify(status) # Route to get available balance @app.route('/api/balance') def get_balance(): balance = bot.get_available_balance() return jsonify({'balance': balance}) # Route to get active positions @app.route('/api/positions') def active_positions(): try: positions = [] active_positions = bot.get_active_positions() if active_positions: for position in active_positions: p = Position( strategy=position.strategy, symbol=position.symbol, side=position.side, entry_price=position.entry_price, quantity=position.quantity, position_value_usdt=position.position_value_usdt, current_price=position.current_price, pnl=position.pnl, pnl_percent=position.pnl_percent ) positions.append(p) return jsonify({'success': True, 'positions': positions}) except Exception as e: return jsonify({'success': False, 'error': str(e)}) # Route to get RSI value @app.route('/api/rsi/') def get_rsi(symbol): try: # Fetch the last 14 closing prices for the given symbol klines = data_provider.get_klines(symbol=symbol, interval='1h', limit=14) if not klines: return jsonify({'success': False, 'error': 'Could not fetch klines for symbol ' + symbol}) closing_prices = [float(kline[4]) for kline in klines] # Extract closing prices if len(closing_prices) < 14: return jsonify({'success': False, 'error': 'Not enough data points to calculate RSI for symbol ' + symbol}) # Calculate RSI using the closing prices rsi = calculations.calculate_rsi(closing_prices) return jsonify({'success': True, 'rsi': rsi}) except Exception as e: return jsonify({'success': False, 'error': str(e)}) # Route to send daily report @app.route('/api/daily-report/send', methods=['POST']) def send_daily_report(): try: bot.send_daily_report() return jsonify({'success': True, 'message': 'Daily report sent successfully'}) except Exception as e: return jsonify({'success': False, 'error': str(e)}) # Route to export trade data @app.route('/api/trade-data/export') def export_trade_data(): try: filename = files.export_trade_data() return jsonify({'success': True, 'filename': filename}) except Exception as e: return jsonify({'success': False, 'error': str(e)}) # Route to train ML models @app.route('/api/train_models', methods=['POST']) def train_ml_models(): try: results = model_trainer.train_models() return jsonify(results) except Exception as e: return jsonify({'error': str(e)}) # Route to get ML insights @app.route('/api/ml_insights') def get_ml_insights(): try: insights = files.load_ml_insights() if insights: return jsonify({'success': True, 'insights': insights}) else: return jsonify({'success': False, 'message': 'No insights available'}) except Exception as e: return jsonify({'success': False, 'error': str(e)}) # Route to get ML predictions @app.route('/api/ml_predictions') def get_ml_predictions(): try: predictions = files.load_ml_predictions() if predictions: return jsonify({'success': True, 'predictions': predictions}) else: return jsonify({'success': False, 'message': 'No predictions available'}) except Exception as e: return jsonify({'success': False, 'error': str(e)}) # Route to set default parameters @app.route('/api/default-params', methods=['POST']) def set_default_params(): try: data = request.get_json() config.update_params(data) return jsonify({'success': True, 'message': 'Default parameters updated successfully'}) except Exception as e: return jsonify({'success': False, 'message': str(e)}) # Route to edit strategy @app.route('/api/strategies/', methods=['POST']) def edit_strategy(strategy_name): try: data = request.get_json() config.update_strategy(strategy_name, data) return jsonify({'success': True, 'message': f'Strategy {strategy_name} updated successfully'}) except Exception as e: return jsonify({'success': False, 'message': str(e)}) # Route to get strategies @app.route('/api/strategies') def get_strategies(): return jsonify(strategies) # Custom logging handler to capture console output class ConsoleLogHandler(logging.Handler): def emit(self, record): log_entry = self.format(record) console_log.append(log_entry) # Limit the console_log size to prevent excessive memory usage if len(console_log) > 1000: console_log.pop(0) # Add the custom handler to the logger console_handler = ConsoleLogHandler() console_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')) app.logger.addHandler(console_handler) logger.log_handlers.append(console_handler) # Route to get console log @app.route('/api/console-log') def get_console_log(): return jsonify({'success': True, 'logs': console_log}) # Route to get current config @app.route('/api/current-config') def get_current_config(): try: # Get bot status bot_status = bot.get_status() # Get